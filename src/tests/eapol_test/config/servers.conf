# -*- text -*-
##
## test.conf	-- Virtual server configuration for testing radiusd.
##
##	$Id$
##

test_port = $ENV{TEST_PORT}

#  Only for testing!
#  Setting this on a production system is a BAD IDEA.
security {
	allow_vulnerable_openssl = yes
}

#
#  Max outstanding requests
#
max_requests = 10000

#
#  References by some modules for default thread pool configuration
#
thread pool {
	start_servers = 1
	max_servers = 1
	max_spare_servers = 1
	min_spare_servers = 0
}

#
#  The test client
#
client eapol_test {
	ipaddr = 127.0.0.1
	secret = testing123
}

#
#  Modules needed for EAP
#
modules {
	$INCLUDE ${maindir}/mods-available/chap
	$INCLUDE ${maindir}/mods-available/pap
	$INCLUDE ${maindir}/mods-available/mschap

	eap {
		$INCLUDE ${testdir}/methods-enabled/

		default_eap_type = md5
		ignore_unknown_eap_types = no
		cisco_accounting_username_bug = no

		#
		#  Should use the same set of snakeoil certs as
		#  eapol_test.
		#
		tls-config tls-common {
			private_key_password = whatever
			private_key_file = ${certdir}/server.pem
			certificate_file = ${certdir}/server.pem
			ca_file = ${cadir}/ca.pem
			ca_path = ${cadir}
			dh_file = ${certdir}/dh

			fragment_size = 1024
			include_length = no

			cipher_list = "DEFAULT"
			ecdh_curve = "prime256v1"

			verify {
			}

			ocsp {
			}
		}
		$INCLUDE ${testdir}/methods-enabled/
	}
}

policy {
	files.authorize {
		if (User-Name == "bob") {
			update control {
				Cleartext-Password := "bob"
			}
		}
	}

	$INCLUDE ${maindir}/policy.d/
}

#
#  Minimal set of virtual servers for performing EAP
#
server test {
	listen {
		ipaddr = 127.0.0.1
		port = ${test_port}
		type = auth
	}

	authorize {
		if (&User-Name =~ /with.*client.*cert/) {
			update control {
				EAP-TLS-Require-Client-Cert := yes
			}
		}
		files
		eap
	}

	authenticate {
		eap
		pap		# Needed for EAP-GTC
		mschap
	}
}

server inner-tunnel {
	authorize {
		files
		pap
		chap
		mschap
		eap
	}

	authenticate {
		pap
		chap
		mschap
		eap
	}
}
